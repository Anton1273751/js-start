// Map и Set

// Сейчас мы знаем о следующих сложных структурах данных:

//     Объекты для хранения именованных коллекций.
//     Массивы для хранения упорядоченных коллекций.

// Но этого не всегда достаточно для решения повседневных задач. Поэтому также существуют Map и Set.
// Map

// Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.

// Методы и свойства:

//     new Map() – создаёт коллекцию.
//     map.set(key, value) – записывает по ключу key значение value.
//     map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
//     map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
//     map.delete(key) – удаляет элемент (пару «ключ/значение») по ключу key.
//     map.clear() – очищает коллекцию от всех элементов.
//     map.size – возвращает текущее количество элементов.

// Set

// Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.

// Его основные методы это:

//     new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set.
//     set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
//     set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false.
//     set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
//     set.clear() – удаляет все имеющиеся значения.
//     set.size – возвращает количество элементов в множестве.

// Основная «изюминка» – это то, что при повторных вызовах set.add() с одним и тем же значением ничего не происходит, за счёт этого как раз и получается, что каждое значение появляется один раз.

// Например, мы ожидаем посетителей, и нам необходимо составить их список. Но повторные визиты не должны приводить к дубликатам. Каждый посетитель должен появиться в списке только один раз.

// Множество Set – как раз то, что нужно для этого: